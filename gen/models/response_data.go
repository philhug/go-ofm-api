// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"encoding/json"
	"io"
	"io/ioutil"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/validate"
)

// ResponseData response data
// swagger:discriminator ResponseData _kind
type ResponseData interface {
	runtime.Validatable

	// kind
	// Required: true
	Kind() string
	SetKind(string)
}

type responseData struct {
	kindField string
}

func (m *responseData) Kind() string {
	return "ResponseData"
}
func (m *responseData) SetKind(val string) {

}

// Validate validates this response data
func (m *responseData) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// UnmarshalResponseDataSlice unmarshals polymorphic slices of ResponseData
func UnmarshalResponseDataSlice(reader io.Reader, consumer runtime.Consumer) ([]ResponseData, error) {
	var elements []json.RawMessage
	if err := consumer.Consume(reader, &elements); err != nil {
		return nil, err
	}

	var result []ResponseData
	for _, element := range elements {
		obj, err := unmarshalResponseData(element, consumer)
		if err != nil {
			return nil, err
		}
		result = append(result, obj)
	}
	return result, nil
}

// UnmarshalResponseData unmarshals polymorphic ResponseData
func UnmarshalResponseData(reader io.Reader, consumer runtime.Consumer) (ResponseData, error) {
	// we need to read this twice, so first into a buffer
	data, err := ioutil.ReadAll(reader)
	if err != nil {
		return nil, err
	}
	return unmarshalResponseData(data, consumer)
}

func unmarshalResponseData(data []byte, consumer runtime.Consumer) (ResponseData, error) {
	buf := bytes.NewBuffer(data)
	buf2 := bytes.NewBuffer(data)

	// the first time this is read is to fetch the value of the _kind property.
	var getType struct {
		Kind string `json:"_kind"`
	}
	if err := consumer.Consume(buf, &getType); err != nil {
		return nil, err
	}

	if err := validate.RequiredString("_kind", "body", getType.Kind); err != nil {
		return nil, err
	}

	// The value of _kind is used to determine which type to create and unmarshal the data into
	switch getType.Kind {
	case "Node":
		var result Node
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil

	case "NodeList":
		var result NodeList
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil

	case "NodeNumberList":
		var result NodeNumberList
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil

	case "Organization":
		var result Organization
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil

	case "RegionList":
		var result RegionList
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil

	case "ResponseData":
		var result responseData
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil

	case "User":
		var result User
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil

	}
	return nil, errors.New(422, "invalid _kind value: %q", getType.Kind)

}
