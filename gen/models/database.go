// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// Database database
// swagger:model Database
type Database string

const (

	// DatabaseOADPendingChanges captures enum value "OAD Pending Changes"
	DatabaseOADPendingChanges Database = "OAD Pending Changes"

	// DatabaseIONOriginativeSuite captures enum value "ION originative suite"
	DatabaseIONOriginativeSuite Database = "ION originative suite"

	// DatabaseOADPrivateWorkspace captures enum value "OAD Private Workspace"
	DatabaseOADPrivateWorkspace Database = "OAD Private Workspace"

	// DatabaseOADStaticData captures enum value "OAD Static Data"
	DatabaseOADStaticData Database = "OAD Static Data"

	// DatabaseDocumentsLibary captures enum value "Documents Libary"
	DatabaseDocumentsLibary Database = "Documents Libary"

	// DatabaseAISMapDesign captures enum value "AIS map design"
	DatabaseAISMapDesign Database = "AIS map design"

	// DatabaseCFEDefinitionFile captures enum value "CFE definition file"
	DatabaseCFEDefinitionFile Database = "CFE definition file"

	// DatabaseMapRegions captures enum value "Map Regions"
	DatabaseMapRegions Database = "Map Regions"

	// DatabaseOADAIRACBuffer captures enum value "OAD AIRAC Buffer"
	DatabaseOADAIRACBuffer Database = "OAD AIRAC Buffer"

	// DatabaseDataOut captures enum value "dataOut"
	DatabaseDataOut Database = "dataOut"
)

// for schema
var databaseEnum []interface{}

func init() {
	var res []Database
	if err := json.Unmarshal([]byte(`["OAD Pending Changes","ION originative suite","OAD Private Workspace","OAD Static Data","Documents Libary","AIS map design","CFE definition file","Map Regions","OAD AIRAC Buffer","dataOut"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		databaseEnum = append(databaseEnum, v)
	}
}

func (m Database) validateDatabaseEnum(path, location string, value Database) error {
	if err := validate.Enum(path, location, value, databaseEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this database
func (m Database) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateDatabaseEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
