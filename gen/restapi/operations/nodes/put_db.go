// Code generated by go-swagger; DO NOT EDIT.

package nodes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// PutDbHandlerFunc turns a function with the right signature into a put db handler
type PutDbHandlerFunc func(PutDbParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn PutDbHandlerFunc) Handle(params PutDbParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// PutDbHandler interface for that can handle valid put db params
type PutDbHandler interface {
	Handle(PutDbParams, interface{}) middleware.Responder
}

// NewPutDb creates a new http.Handler for the put db operation
func NewPutDb(ctx *middleware.Context, handler PutDbHandler) *PutDb {
	return &PutDb{Context: ctx, Handler: handler}
}

/*PutDb swagger:route PUT /node/{db} Nodes putDb

Creates a new database

*/
type PutDb struct {
	Context *middleware.Context
	Handler PutDbHandler
}

func (o *PutDb) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPutDbParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
