// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"net/http"
	"strings"

	errors "github.com/go-openapi/errors"
	loads "github.com/go-openapi/loads"
	runtime "github.com/go-openapi/runtime"
	middleware "github.com/go-openapi/runtime/middleware"
	security "github.com/go-openapi/runtime/security"
	spec "github.com/go-openapi/spec"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/philhug/go-ofmdbapi/gen/restapi/operations/information"
	"github.com/philhug/go-ofmdbapi/gen/restapi/operations/native_client"
	"github.com/philhug/go-ofmdbapi/gen/restapi/operations/nodes"
)

// NewOfmdbAPI creates a new Ofmdb instance
func NewOfmdbAPI(spec *loads.Document) *OfmdbAPI {
	return &OfmdbAPI{
		handlers:            make(map[string]map[string]http.Handler),
		formats:             strfmt.Default,
		defaultConsumes:     "application/json",
		defaultProduces:     "application/json",
		customConsumers:     make(map[string]runtime.Consumer),
		customProducers:     make(map[string]runtime.Producer),
		ServerShutdown:      func() {},
		spec:                spec,
		ServeError:          errors.ServeError,
		BasicAuthenticator:  security.BasicAuth,
		APIKeyAuthenticator: security.APIKeyAuth,
		BearerAuthenticator: security.BearerAuth,
		JSONConsumer:        runtime.JSONConsumer(),
		BinConsumer:         runtime.ByteStreamConsumer(),
		JSONProducer:        runtime.JSONProducer(),
		BinProducer:         runtime.ByteStreamProducer(),
		AllDbsHandler: AllDbsHandlerFunc(func(params AllDbsParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation AllDbs has not yet been implemented")
		}),
		NodesAllDocsHandler: nodes.AllDocsHandlerFunc(func(params nodes.AllDocsParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation NodesAllDocs has not yet been implemented")
		}),
		NodesChangesDbHandler: nodes.ChangesDbHandlerFunc(func(params nodes.ChangesDbParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation NodesChangesDb has not yet been implemented")
		}),
		NativeClientCreateBlobHandler: native_client.CreateBlobHandlerFunc(func(params native_client.CreateBlobParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation NativeClientCreateBlob has not yet been implemented")
		}),
		NodesCreateNodeHandler: nodes.CreateNodeHandlerFunc(func(params nodes.CreateNodeParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation NodesCreateNode has not yet been implemented")
		}),
		NativeClientCreateOrgNodeHandler: native_client.CreateOrgNodeHandlerFunc(func(params native_client.CreateOrgNodeParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation NativeClientCreateOrgNode has not yet been implemented")
		}),
		NativeClientCreateUserNodeHandler: native_client.CreateUserNodeHandlerFunc(func(params native_client.CreateUserNodeParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation NativeClientCreateUserNode has not yet been implemented")
		}),
		NodesDeleteNodeHandler: nodes.DeleteNodeHandlerFunc(func(params nodes.DeleteNodeParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation NodesDeleteNode has not yet been implemented")
		}),
		NativeClientDeleteOrgNodeHandler: native_client.DeleteOrgNodeHandlerFunc(func(params native_client.DeleteOrgNodeParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation NativeClientDeleteOrgNode has not yet been implemented")
		}),
		NativeClientDeleteUserNodeHandler: native_client.DeleteUserNodeHandlerFunc(func(params native_client.DeleteUserNodeParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation NativeClientDeleteUserNode has not yet been implemented")
		}),
		NativeClientGetBlobHandler: native_client.GetBlobHandlerFunc(func(params native_client.GetBlobParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation NativeClientGetBlob has not yet been implemented")
		}),
		NodesGetMultipleNodesHandler: nodes.GetMultipleNodesHandlerFunc(func(params nodes.GetMultipleNodesParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation NodesGetMultipleNodes has not yet been implemented")
		}),
		NodesGetNodeHandler: nodes.GetNodeHandlerFunc(func(params nodes.GetNodeParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation NodesGetNode has not yet been implemented")
		}),
		NativeClientGetOrgNodeHandler: native_client.GetOrgNodeHandlerFunc(func(params native_client.GetOrgNodeParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation NativeClientGetOrgNode has not yet been implemented")
		}),
		InformationGetRegionsHandler: information.GetRegionsHandlerFunc(func(params information.GetRegionsParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation InformationGetRegions has not yet been implemented")
		}),
		InformationGetUserInfoHandler: information.GetUserInfoHandlerFunc(func(params information.GetUserInfoParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation InformationGetUserInfo has not yet been implemented")
		}),
		NativeClientGetUserNodeHandler: native_client.GetUserNodeHandlerFunc(func(params native_client.GetUserNodeParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation NativeClientGetUserNode has not yet been implemented")
		}),
		NativeClientGetUserPermissionNodeHandler: native_client.GetUserPermissionNodeHandlerFunc(func(params native_client.GetUserPermissionNodeParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation NativeClientGetUserPermissionNode has not yet been implemented")
		}),
		NodesPatchNodeHandler: nodes.PatchNodeHandlerFunc(func(params nodes.PatchNodeParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation NodesPatchNode has not yet been implemented")
		}),
		NodesPutDbHandler: nodes.PutDbHandlerFunc(func(params nodes.PutDbParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation NodesPutDb has not yet been implemented")
		}),
		NodesSearchNodeHandler: nodes.SearchNodeHandlerFunc(func(params nodes.SearchNodeParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation NodesSearchNode has not yet been implemented")
		}),
		NativeClientSearchOrgNodeHandler: native_client.SearchOrgNodeHandlerFunc(func(params native_client.SearchOrgNodeParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation NativeClientSearchOrgNode has not yet been implemented")
		}),
		NativeClientSearchUserNodeHandler: native_client.SearchUserNodeHandlerFunc(func(params native_client.SearchUserNodeParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation NativeClientSearchUserNode has not yet been implemented")
		}),
		NodesUpdateNodeHandler: nodes.UpdateNodeHandlerFunc(func(params nodes.UpdateNodeParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation NodesUpdateNode has not yet been implemented")
		}),
		NativeClientUpdateOrgNodeHandler: native_client.UpdateOrgNodeHandlerFunc(func(params native_client.UpdateOrgNodeParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation NativeClientUpdateOrgNode has not yet been implemented")
		}),
		NativeClientUpdateUserNodeHandler: native_client.UpdateUserNodeHandlerFunc(func(params native_client.UpdateUserNodeParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation NativeClientUpdateUserNode has not yet been implemented")
		}),

		// Applies when the Authorization header is set with the Basic scheme
		BasicAuthAuth: func(user string, pass string) (interface{}, error) {
			return nil, errors.NotImplemented("basic auth  (BasicAuth) has not yet been implemented")
		},

		// default authorizer is authorized meaning no requests are blocked
		APIAuthorizer: security.Authorized(),
	}
}

/*OfmdbAPI Open flightmap data api.
Note: This is a simple conversion of the current model used by the client for compatbility. It's not indend for public use.
*/
type OfmdbAPI struct {
	spec            *loads.Document
	context         *middleware.Context
	handlers        map[string]map[string]http.Handler
	formats         strfmt.Registry
	customConsumers map[string]runtime.Consumer
	customProducers map[string]runtime.Producer
	defaultConsumes string
	defaultProduces string
	Middleware      func(middleware.Builder) http.Handler

	// BasicAuthenticator generates a runtime.Authenticator from the supplied basic auth function.
	// It has a default implemention in the security package, however you can replace it for your particular usage.
	BasicAuthenticator func(security.UserPassAuthentication) runtime.Authenticator
	// APIKeyAuthenticator generates a runtime.Authenticator from the supplied token auth function.
	// It has a default implemention in the security package, however you can replace it for your particular usage.
	APIKeyAuthenticator func(string, string, security.TokenAuthentication) runtime.Authenticator
	// BearerAuthenticator generates a runtime.Authenticator from the supplied bearer token auth function.
	// It has a default implemention in the security package, however you can replace it for your particular usage.
	BearerAuthenticator func(string, security.ScopedTokenAuthentication) runtime.Authenticator

	// JSONConsumer registers a consumer for a "application/json" mime type
	JSONConsumer runtime.Consumer
	// BinConsumer registers a consumer for a "application/octet-stream" mime type
	BinConsumer runtime.Consumer

	// JSONProducer registers a producer for a "application/json" mime type
	JSONProducer runtime.Producer
	// BinProducer registers a producer for a "application/octet-stream" mime type
	BinProducer runtime.Producer

	// BasicAuthAuth registers a function that takes username and password and returns a principal
	// it performs authentication with basic auth
	BasicAuthAuth func(string, string) (interface{}, error)

	// APIAuthorizer provides access control (ACL/RBAC/ABAC) by providing access to the request and authenticated principal
	APIAuthorizer runtime.Authorizer

	// AllDbsHandler sets the operation handler for the all dbs operation
	AllDbsHandler AllDbsHandler
	// NodesAllDocsHandler sets the operation handler for the all docs operation
	NodesAllDocsHandler nodes.AllDocsHandler
	// NodesChangesDbHandler sets the operation handler for the changes db operation
	NodesChangesDbHandler nodes.ChangesDbHandler
	// NativeClientCreateBlobHandler sets the operation handler for the create blob operation
	NativeClientCreateBlobHandler native_client.CreateBlobHandler
	// NodesCreateNodeHandler sets the operation handler for the create node operation
	NodesCreateNodeHandler nodes.CreateNodeHandler
	// NativeClientCreateOrgNodeHandler sets the operation handler for the create org node operation
	NativeClientCreateOrgNodeHandler native_client.CreateOrgNodeHandler
	// NativeClientCreateUserNodeHandler sets the operation handler for the create user node operation
	NativeClientCreateUserNodeHandler native_client.CreateUserNodeHandler
	// NodesDeleteNodeHandler sets the operation handler for the delete node operation
	NodesDeleteNodeHandler nodes.DeleteNodeHandler
	// NativeClientDeleteOrgNodeHandler sets the operation handler for the delete org node operation
	NativeClientDeleteOrgNodeHandler native_client.DeleteOrgNodeHandler
	// NativeClientDeleteUserNodeHandler sets the operation handler for the delete user node operation
	NativeClientDeleteUserNodeHandler native_client.DeleteUserNodeHandler
	// NativeClientGetBlobHandler sets the operation handler for the get blob operation
	NativeClientGetBlobHandler native_client.GetBlobHandler
	// NodesGetMultipleNodesHandler sets the operation handler for the get multiple nodes operation
	NodesGetMultipleNodesHandler nodes.GetMultipleNodesHandler
	// NodesGetNodeHandler sets the operation handler for the get node operation
	NodesGetNodeHandler nodes.GetNodeHandler
	// NativeClientGetOrgNodeHandler sets the operation handler for the get org node operation
	NativeClientGetOrgNodeHandler native_client.GetOrgNodeHandler
	// InformationGetRegionsHandler sets the operation handler for the get regions operation
	InformationGetRegionsHandler information.GetRegionsHandler
	// InformationGetUserInfoHandler sets the operation handler for the get user info operation
	InformationGetUserInfoHandler information.GetUserInfoHandler
	// NativeClientGetUserNodeHandler sets the operation handler for the get user node operation
	NativeClientGetUserNodeHandler native_client.GetUserNodeHandler
	// NativeClientGetUserPermissionNodeHandler sets the operation handler for the get user permission node operation
	NativeClientGetUserPermissionNodeHandler native_client.GetUserPermissionNodeHandler
	// NodesPatchNodeHandler sets the operation handler for the patch node operation
	NodesPatchNodeHandler nodes.PatchNodeHandler
	// NodesPutDbHandler sets the operation handler for the put db operation
	NodesPutDbHandler nodes.PutDbHandler
	// NodesSearchNodeHandler sets the operation handler for the search node operation
	NodesSearchNodeHandler nodes.SearchNodeHandler
	// NativeClientSearchOrgNodeHandler sets the operation handler for the search org node operation
	NativeClientSearchOrgNodeHandler native_client.SearchOrgNodeHandler
	// NativeClientSearchUserNodeHandler sets the operation handler for the search user node operation
	NativeClientSearchUserNodeHandler native_client.SearchUserNodeHandler
	// NodesUpdateNodeHandler sets the operation handler for the update node operation
	NodesUpdateNodeHandler nodes.UpdateNodeHandler
	// NativeClientUpdateOrgNodeHandler sets the operation handler for the update org node operation
	NativeClientUpdateOrgNodeHandler native_client.UpdateOrgNodeHandler
	// NativeClientUpdateUserNodeHandler sets the operation handler for the update user node operation
	NativeClientUpdateUserNodeHandler native_client.UpdateUserNodeHandler

	// ServeError is called when an error is received, there is a default handler
	// but you can set your own with this
	ServeError func(http.ResponseWriter, *http.Request, error)

	// ServerShutdown is called when the HTTP(S) server is shut down and done
	// handling all active connections and does not accept connections any more
	ServerShutdown func()

	// Custom command line argument groups with their descriptions
	CommandLineOptionsGroups []swag.CommandLineOptionsGroup

	// User defined logger function.
	Logger func(string, ...interface{})
}

// SetDefaultProduces sets the default produces media type
func (o *OfmdbAPI) SetDefaultProduces(mediaType string) {
	o.defaultProduces = mediaType
}

// SetDefaultConsumes returns the default consumes media type
func (o *OfmdbAPI) SetDefaultConsumes(mediaType string) {
	o.defaultConsumes = mediaType
}

// SetSpec sets a spec that will be served for the clients.
func (o *OfmdbAPI) SetSpec(spec *loads.Document) {
	o.spec = spec
}

// DefaultProduces returns the default produces media type
func (o *OfmdbAPI) DefaultProduces() string {
	return o.defaultProduces
}

// DefaultConsumes returns the default consumes media type
func (o *OfmdbAPI) DefaultConsumes() string {
	return o.defaultConsumes
}

// Formats returns the registered string formats
func (o *OfmdbAPI) Formats() strfmt.Registry {
	return o.formats
}

// RegisterFormat registers a custom format validator
func (o *OfmdbAPI) RegisterFormat(name string, format strfmt.Format, validator strfmt.Validator) {
	o.formats.Add(name, format, validator)
}

// Validate validates the registrations in the OfmdbAPI
func (o *OfmdbAPI) Validate() error {
	var unregistered []string

	if o.JSONConsumer == nil {
		unregistered = append(unregistered, "JSONConsumer")
	}

	if o.BinConsumer == nil {
		unregistered = append(unregistered, "BinConsumer")
	}

	if o.JSONProducer == nil {
		unregistered = append(unregistered, "JSONProducer")
	}

	if o.BinProducer == nil {
		unregistered = append(unregistered, "BinProducer")
	}

	if o.BasicAuthAuth == nil {
		unregistered = append(unregistered, "BasicAuthAuth")
	}

	if o.AllDbsHandler == nil {
		unregistered = append(unregistered, "AllDbsHandler")
	}

	if o.NodesAllDocsHandler == nil {
		unregistered = append(unregistered, "nodes.AllDocsHandler")
	}

	if o.NodesChangesDbHandler == nil {
		unregistered = append(unregistered, "nodes.ChangesDbHandler")
	}

	if o.NativeClientCreateBlobHandler == nil {
		unregistered = append(unregistered, "native_client.CreateBlobHandler")
	}

	if o.NodesCreateNodeHandler == nil {
		unregistered = append(unregistered, "nodes.CreateNodeHandler")
	}

	if o.NativeClientCreateOrgNodeHandler == nil {
		unregistered = append(unregistered, "native_client.CreateOrgNodeHandler")
	}

	if o.NativeClientCreateUserNodeHandler == nil {
		unregistered = append(unregistered, "native_client.CreateUserNodeHandler")
	}

	if o.NodesDeleteNodeHandler == nil {
		unregistered = append(unregistered, "nodes.DeleteNodeHandler")
	}

	if o.NativeClientDeleteOrgNodeHandler == nil {
		unregistered = append(unregistered, "native_client.DeleteOrgNodeHandler")
	}

	if o.NativeClientDeleteUserNodeHandler == nil {
		unregistered = append(unregistered, "native_client.DeleteUserNodeHandler")
	}

	if o.NativeClientGetBlobHandler == nil {
		unregistered = append(unregistered, "native_client.GetBlobHandler")
	}

	if o.NodesGetMultipleNodesHandler == nil {
		unregistered = append(unregistered, "nodes.GetMultipleNodesHandler")
	}

	if o.NodesGetNodeHandler == nil {
		unregistered = append(unregistered, "nodes.GetNodeHandler")
	}

	if o.NativeClientGetOrgNodeHandler == nil {
		unregistered = append(unregistered, "native_client.GetOrgNodeHandler")
	}

	if o.InformationGetRegionsHandler == nil {
		unregistered = append(unregistered, "information.GetRegionsHandler")
	}

	if o.InformationGetUserInfoHandler == nil {
		unregistered = append(unregistered, "information.GetUserInfoHandler")
	}

	if o.NativeClientGetUserNodeHandler == nil {
		unregistered = append(unregistered, "native_client.GetUserNodeHandler")
	}

	if o.NativeClientGetUserPermissionNodeHandler == nil {
		unregistered = append(unregistered, "native_client.GetUserPermissionNodeHandler")
	}

	if o.NodesPatchNodeHandler == nil {
		unregistered = append(unregistered, "nodes.PatchNodeHandler")
	}

	if o.NodesPutDbHandler == nil {
		unregistered = append(unregistered, "nodes.PutDbHandler")
	}

	if o.NodesSearchNodeHandler == nil {
		unregistered = append(unregistered, "nodes.SearchNodeHandler")
	}

	if o.NativeClientSearchOrgNodeHandler == nil {
		unregistered = append(unregistered, "native_client.SearchOrgNodeHandler")
	}

	if o.NativeClientSearchUserNodeHandler == nil {
		unregistered = append(unregistered, "native_client.SearchUserNodeHandler")
	}

	if o.NodesUpdateNodeHandler == nil {
		unregistered = append(unregistered, "nodes.UpdateNodeHandler")
	}

	if o.NativeClientUpdateOrgNodeHandler == nil {
		unregistered = append(unregistered, "native_client.UpdateOrgNodeHandler")
	}

	if o.NativeClientUpdateUserNodeHandler == nil {
		unregistered = append(unregistered, "native_client.UpdateUserNodeHandler")
	}

	if len(unregistered) > 0 {
		return fmt.Errorf("missing registration: %s", strings.Join(unregistered, ", "))
	}

	return nil
}

// ServeErrorFor gets a error handler for a given operation id
func (o *OfmdbAPI) ServeErrorFor(operationID string) func(http.ResponseWriter, *http.Request, error) {
	return o.ServeError
}

// AuthenticatorsFor gets the authenticators for the specified security schemes
func (o *OfmdbAPI) AuthenticatorsFor(schemes map[string]spec.SecurityScheme) map[string]runtime.Authenticator {

	result := make(map[string]runtime.Authenticator)
	for name, scheme := range schemes {
		switch name {

		case "BasicAuth":
			_ = scheme
			result[name] = o.BasicAuthenticator(o.BasicAuthAuth)

		}
	}
	return result

}

// Authorizer returns the registered authorizer
func (o *OfmdbAPI) Authorizer() runtime.Authorizer {

	return o.APIAuthorizer

}

// ConsumersFor gets the consumers for the specified media types
func (o *OfmdbAPI) ConsumersFor(mediaTypes []string) map[string]runtime.Consumer {

	result := make(map[string]runtime.Consumer)
	for _, mt := range mediaTypes {
		switch mt {

		case "application/json":
			result["application/json"] = o.JSONConsumer

		case "application/octet-stream":
			result["application/octet-stream"] = o.BinConsumer

		}

		if c, ok := o.customConsumers[mt]; ok {
			result[mt] = c
		}
	}
	return result

}

// ProducersFor gets the producers for the specified media types
func (o *OfmdbAPI) ProducersFor(mediaTypes []string) map[string]runtime.Producer {

	result := make(map[string]runtime.Producer)
	for _, mt := range mediaTypes {
		switch mt {

		case "application/json":
			result["application/json"] = o.JSONProducer

		case "application/octet-stream":
			result["application/octet-stream"] = o.BinProducer

		}

		if p, ok := o.customProducers[mt]; ok {
			result[mt] = p
		}
	}
	return result

}

// HandlerFor gets a http.Handler for the provided operation method and path
func (o *OfmdbAPI) HandlerFor(method, path string) (http.Handler, bool) {
	if o.handlers == nil {
		return nil, false
	}
	um := strings.ToUpper(method)
	if _, ok := o.handlers[um]; !ok {
		return nil, false
	}
	if path == "/" {
		path = ""
	}
	h, ok := o.handlers[um][path]
	return h, ok
}

// Context returns the middleware context for the ofmdb API
func (o *OfmdbAPI) Context() *middleware.Context {
	if o.context == nil {
		o.context = middleware.NewRoutableContext(o.spec, o, nil)
	}

	return o.context
}

func (o *OfmdbAPI) initHandlerCache() {
	o.Context() // don't care about the result, just that the initialization happened

	if o.handlers == nil {
		o.handlers = make(map[string]map[string]http.Handler)
	}

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/node/_all_dbs"] = NewAllDbs(o.context, o.AllDbsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/node/{db}/_all_docs"] = nodes.NewAllDocs(o.context, o.NodesAllDocsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/node/{db}/_changes"] = nodes.NewChangesDb(o.context, o.NodesChangesDbHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/blobstore/_create"] = native_client.NewCreateBlob(o.context, o.NativeClientCreateBlobHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/node/{db}/_create"] = nodes.NewCreateNode(o.context, o.NodesCreateNodeHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/nativeclient/org/_create"] = native_client.NewCreateOrgNode(o.context, o.NativeClientCreateOrgNodeHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/nativeclient/user/_create"] = native_client.NewCreateUserNode(o.context, o.NativeClientCreateUserNodeHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/node/{db}/{id}"] = nodes.NewDeleteNode(o.context, o.NodesDeleteNodeHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/nativeclient/org/{id}"] = native_client.NewDeleteOrgNode(o.context, o.NativeClientDeleteOrgNodeHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/nativeclient/user/{id}"] = native_client.NewDeleteUserNode(o.context, o.NativeClientDeleteUserNodeHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/blobstore/{id}"] = native_client.NewGetBlob(o.context, o.NativeClientGetBlobHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/node/{db}/_multi"] = nodes.NewGetMultipleNodes(o.context, o.NodesGetMultipleNodesHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/node/{db}/{id}"] = nodes.NewGetNode(o.context, o.NodesGetNodeHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/nativeclient/org/{id}"] = native_client.NewGetOrgNode(o.context, o.NativeClientGetOrgNodeHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/info/regions"] = information.NewGetRegions(o.context, o.InformationGetRegionsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/info/userinfo"] = information.NewGetUserInfo(o.context, o.InformationGetUserInfoHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/nativeclient/user/{id}"] = native_client.NewGetUserNode(o.context, o.NativeClientGetUserNodeHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/nativeclient/permissions/{id}"] = native_client.NewGetUserPermissionNode(o.context, o.NativeClientGetUserPermissionNodeHandler)

	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/node/{db}/{id}"] = nodes.NewPatchNode(o.context, o.NodesPatchNodeHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/node/{db}"] = nodes.NewPutDb(o.context, o.NodesPutDbHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/node/{db}/_search"] = nodes.NewSearchNode(o.context, o.NodesSearchNodeHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/nativeclient/org/_search"] = native_client.NewSearchOrgNode(o.context, o.NativeClientSearchOrgNodeHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/nativeclient/user/_search"] = native_client.NewSearchUserNode(o.context, o.NativeClientSearchUserNodeHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/node/{db}/{id}"] = nodes.NewUpdateNode(o.context, o.NodesUpdateNodeHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/nativeclient/org/{id}"] = native_client.NewUpdateOrgNode(o.context, o.NativeClientUpdateOrgNodeHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/nativeclient/user/{id}"] = native_client.NewUpdateUserNode(o.context, o.NativeClientUpdateUserNodeHandler)

}

// Serve creates a http handler to serve the API over HTTP
// can be used directly in http.ListenAndServe(":8000", api.Serve(nil))
func (o *OfmdbAPI) Serve(builder middleware.Builder) http.Handler {
	o.Init()

	if o.Middleware != nil {
		return o.Middleware(builder)
	}
	return o.context.APIHandler(builder)
}

// Init allows you to just initialize the handler cache, you can then recompose the middleware as you see fit
func (o *OfmdbAPI) Init() {
	if len(o.handlers) == 0 {
		o.initHandlerCache()
	}
}

// RegisterConsumer allows you to add (or override) a consumer for a media type.
func (o *OfmdbAPI) RegisterConsumer(mediaType string, consumer runtime.Consumer) {
	o.customConsumers[mediaType] = consumer
}

// RegisterProducer allows you to add (or override) a producer for a media type.
func (o *OfmdbAPI) RegisterProducer(mediaType string, producer runtime.Producer) {
	o.customProducers[mediaType] = producer
}
