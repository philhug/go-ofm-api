// Code generated by go-swagger; DO NOT EDIT.

package native_client

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new native client API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for native client API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreateBlob creates new blob
*/
func (a *Client) CreateBlob(params *CreateBlobParams, authInfo runtime.ClientAuthInfoWriter) (*CreateBlobOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateBlobParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createBlob",
		Method:             "PUT",
		PathPattern:        "/blobstore/_create",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/octet-stream"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateBlobReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateBlobOK), nil

}

/*
CreateOrgNode creates new organisation
*/
func (a *Client) CreateOrgNode(params *CreateOrgNodeParams, authInfo runtime.ClientAuthInfoWriter) (*CreateOrgNodeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateOrgNodeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createOrgNode",
		Method:             "PUT",
		PathPattern:        "/nativeclient/org/_create",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateOrgNodeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateOrgNodeOK), nil

}

/*
CreateUserNode creates new organisation
*/
func (a *Client) CreateUserNode(params *CreateUserNodeParams, authInfo runtime.ClientAuthInfoWriter) (*CreateUserNodeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateUserNodeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createUserNode",
		Method:             "PUT",
		PathPattern:        "/nativeclient/user/_create",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateUserNodeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateUserNodeOK), nil

}

/*
DeleteOrgNode deletes
*/
func (a *Client) DeleteOrgNode(params *DeleteOrgNodeParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteOrgNodeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteOrgNodeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteOrgNode",
		Method:             "DELETE",
		PathPattern:        "/nativeclient/org/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteOrgNodeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteOrgNodeOK), nil

}

/*
DeleteUserNode deletes
*/
func (a *Client) DeleteUserNode(params *DeleteUserNodeParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteUserNodeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteUserNodeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteUserNode",
		Method:             "DELETE",
		PathPattern:        "/nativeclient/user/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteUserNodeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteUserNodeOK), nil

}

/*
GetBlob gets blob
*/
func (a *Client) GetBlob(params *GetBlobParams, authInfo runtime.ClientAuthInfoWriter, writer io.Writer) (*GetBlobOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBlobParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getBlob",
		Method:             "GET",
		PathPattern:        "/blobstore/{id}",
		ProducesMediaTypes: []string{"application/octet-stream"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetBlobReader{formats: a.formats, writer: writer},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetBlobOK), nil

}

/*
GetOrgNode gets node data
*/
func (a *Client) GetOrgNode(params *GetOrgNodeParams, authInfo runtime.ClientAuthInfoWriter) (*GetOrgNodeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOrgNodeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getOrgNode",
		Method:             "GET",
		PathPattern:        "/nativeclient/org/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetOrgNodeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetOrgNodeOK), nil

}

/*
GetUserNode gets node data
*/
func (a *Client) GetUserNode(params *GetUserNodeParams, authInfo runtime.ClientAuthInfoWriter) (*GetUserNodeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUserNodeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getUserNode",
		Method:             "GET",
		PathPattern:        "/nativeclient/user/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetUserNodeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetUserNodeOK), nil

}

/*
GetUserPermissionNode gets user permissions
*/
func (a *Client) GetUserPermissionNode(params *GetUserPermissionNodeParams, authInfo runtime.ClientAuthInfoWriter) (*GetUserPermissionNodeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUserPermissionNodeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getUserPermissionNode",
		Method:             "GET",
		PathPattern:        "/nativeclient/permissions/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetUserPermissionNodeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetUserPermissionNodeOK), nil

}

/*
SearchOrgNode searches

Return all org objects in database.

*/
func (a *Client) SearchOrgNode(params *SearchOrgNodeParams, authInfo runtime.ClientAuthInfoWriter) (*SearchOrgNodeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchOrgNodeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "searchOrgNode",
		Method:             "POST",
		PathPattern:        "/nativeclient/org/_search",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SearchOrgNodeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SearchOrgNodeOK), nil

}

/*
SearchUserNode searches

Return all org objects in database.

*/
func (a *Client) SearchUserNode(params *SearchUserNodeParams, authInfo runtime.ClientAuthInfoWriter) (*SearchUserNodeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchUserNodeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "searchUserNode",
		Method:             "POST",
		PathPattern:        "/nativeclient/user/_search",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SearchUserNodeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SearchUserNodeOK), nil

}

/*
UpdateOrgNode replaces node
*/
func (a *Client) UpdateOrgNode(params *UpdateOrgNodeParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateOrgNodeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateOrgNodeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateOrgNode",
		Method:             "PUT",
		PathPattern:        "/nativeclient/org/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateOrgNodeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateOrgNodeOK), nil

}

/*
UpdateUserNode replaces node
*/
func (a *Client) UpdateUserNode(params *UpdateUserNodeParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateUserNodeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateUserNodeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateUserNode",
		Method:             "PUT",
		PathPattern:        "/nativeclient/user/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateUserNodeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateUserNodeOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
