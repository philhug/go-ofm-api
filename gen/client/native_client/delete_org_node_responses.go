// Code generated by go-swagger; DO NOT EDIT.

package native_client

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/philhug/go-ofm-api/gen/models"
)

// DeleteOrgNodeReader is a Reader for the DeleteOrgNode structure.
type DeleteOrgNodeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteOrgNodeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewDeleteOrgNodeOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 404:
		result := NewDeleteOrgNodeNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewDeleteOrgNodeOK creates a DeleteOrgNodeOK with default headers values
func NewDeleteOrgNodeOK() *DeleteOrgNodeOK {
	return &DeleteOrgNodeOK{}
}

/*DeleteOrgNodeOK handles this case with default header values.

OK
*/
type DeleteOrgNodeOK struct {
	Payload *models.Organization
}

func (o *DeleteOrgNodeOK) Error() string {
	return fmt.Sprintf("[DELETE /nativeclient/org/{id}][%d] deleteOrgNodeOK  %+v", 200, o.Payload)
}

func (o *DeleteOrgNodeOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Organization)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteOrgNodeNotFound creates a DeleteOrgNodeNotFound with default headers values
func NewDeleteOrgNodeNotFound() *DeleteOrgNodeNotFound {
	return &DeleteOrgNodeNotFound{}
}

/*DeleteOrgNodeNotFound handles this case with default header values.

Node not found
*/
type DeleteOrgNodeNotFound struct {
}

func (o *DeleteOrgNodeNotFound) Error() string {
	return fmt.Sprintf("[DELETE /nativeclient/org/{id}][%d] deleteOrgNodeNotFound ", 404)
}

func (o *DeleteOrgNodeNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
