// Code generated by go-swagger; DO NOT EDIT.

package nodes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetAttachmentParams creates a new GetAttachmentParams object
// with the default values initialized.
func NewGetAttachmentParams() *GetAttachmentParams {
	var ()
	return &GetAttachmentParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetAttachmentParamsWithTimeout creates a new GetAttachmentParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetAttachmentParamsWithTimeout(timeout time.Duration) *GetAttachmentParams {
	var ()
	return &GetAttachmentParams{

		timeout: timeout,
	}
}

// NewGetAttachmentParamsWithContext creates a new GetAttachmentParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetAttachmentParamsWithContext(ctx context.Context) *GetAttachmentParams {
	var ()
	return &GetAttachmentParams{

		Context: ctx,
	}
}

// NewGetAttachmentParamsWithHTTPClient creates a new GetAttachmentParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetAttachmentParamsWithHTTPClient(client *http.Client) *GetAttachmentParams {
	var ()
	return &GetAttachmentParams{
		HTTPClient: client,
	}
}

/*GetAttachmentParams contains all the parameters to send to the API endpoint
for the get attachment operation typically these are written to a http.Request
*/
type GetAttachmentParams struct {

	/*Attname
	  Unique blob identifier

	*/
	Attname string
	/*Db
	  Database name (e.g. oad)

	*/
	Db string
	/*ID
	  Unique node identifier

	*/
	ID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get attachment params
func (o *GetAttachmentParams) WithTimeout(timeout time.Duration) *GetAttachmentParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get attachment params
func (o *GetAttachmentParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get attachment params
func (o *GetAttachmentParams) WithContext(ctx context.Context) *GetAttachmentParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get attachment params
func (o *GetAttachmentParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get attachment params
func (o *GetAttachmentParams) WithHTTPClient(client *http.Client) *GetAttachmentParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get attachment params
func (o *GetAttachmentParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAttname adds the attname to the get attachment params
func (o *GetAttachmentParams) WithAttname(attname string) *GetAttachmentParams {
	o.SetAttname(attname)
	return o
}

// SetAttname adds the attname to the get attachment params
func (o *GetAttachmentParams) SetAttname(attname string) {
	o.Attname = attname
}

// WithDb adds the db to the get attachment params
func (o *GetAttachmentParams) WithDb(db string) *GetAttachmentParams {
	o.SetDb(db)
	return o
}

// SetDb adds the db to the get attachment params
func (o *GetAttachmentParams) SetDb(db string) {
	o.Db = db
}

// WithID adds the id to the get attachment params
func (o *GetAttachmentParams) WithID(id string) *GetAttachmentParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the get attachment params
func (o *GetAttachmentParams) SetID(id string) {
	o.ID = id
}

// WriteToRequest writes these params to a swagger request
func (o *GetAttachmentParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param attname
	if err := r.SetPathParam("attname", o.Attname); err != nil {
		return err
	}

	// path param db
	if err := r.SetPathParam("db", o.Db); err != nil {
		return err
	}

	// path param id
	if err := r.SetPathParam("id", o.ID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
