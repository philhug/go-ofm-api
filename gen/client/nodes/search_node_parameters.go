// Code generated by go-swagger; DO NOT EDIT.

package nodes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/philhug/go-ofm-api/gen/models"
)

// NewSearchNodeParams creates a new SearchNodeParams object
// with the default values initialized.
func NewSearchNodeParams() *SearchNodeParams {
	var (
		deletedDefault = bool(false)
	)
	return &SearchNodeParams{
		Deleted: &deletedDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewSearchNodeParamsWithTimeout creates a new SearchNodeParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewSearchNodeParamsWithTimeout(timeout time.Duration) *SearchNodeParams {
	var (
		deletedDefault = bool(false)
	)
	return &SearchNodeParams{
		Deleted: &deletedDefault,

		timeout: timeout,
	}
}

// NewSearchNodeParamsWithContext creates a new SearchNodeParams object
// with the default values initialized, and the ability to set a context for a request
func NewSearchNodeParamsWithContext(ctx context.Context) *SearchNodeParams {
	var (
		deletedDefault = bool(false)
	)
	return &SearchNodeParams{
		Deleted: &deletedDefault,

		Context: ctx,
	}
}

// NewSearchNodeParamsWithHTTPClient creates a new SearchNodeParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewSearchNodeParamsWithHTTPClient(client *http.Client) *SearchNodeParams {
	var (
		deletedDefault = bool(false)
	)
	return &SearchNodeParams{
		Deleted:    &deletedDefault,
		HTTPClient: client,
	}
}

/*SearchNodeParams contains all the parameters to send to the API endpoint
for the search node operation typically these are written to a http.Request
*/
type SearchNodeParams struct {

	/*Bbox
	  bounding box (left,bottom,right,top)

	*/
	Bbox *string
	/*Db
	  Database name (e.g. "OAD Pending Changes")

	*/
	Db string
	/*Deleted
	  return deleted nodes

	*/
	Deleted *bool
	/*Fulltext
	  full text search in Search Tags

	*/
	Fulltext *string
	/*Query
	  Query with name value pairs. exact matches. e.g. {region: 'LSAS', type: 'Ase/Abd'

	*/
	Query *models.NodeQuery

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the search node params
func (o *SearchNodeParams) WithTimeout(timeout time.Duration) *SearchNodeParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the search node params
func (o *SearchNodeParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the search node params
func (o *SearchNodeParams) WithContext(ctx context.Context) *SearchNodeParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the search node params
func (o *SearchNodeParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the search node params
func (o *SearchNodeParams) WithHTTPClient(client *http.Client) *SearchNodeParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the search node params
func (o *SearchNodeParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBbox adds the bbox to the search node params
func (o *SearchNodeParams) WithBbox(bbox *string) *SearchNodeParams {
	o.SetBbox(bbox)
	return o
}

// SetBbox adds the bbox to the search node params
func (o *SearchNodeParams) SetBbox(bbox *string) {
	o.Bbox = bbox
}

// WithDb adds the db to the search node params
func (o *SearchNodeParams) WithDb(db string) *SearchNodeParams {
	o.SetDb(db)
	return o
}

// SetDb adds the db to the search node params
func (o *SearchNodeParams) SetDb(db string) {
	o.Db = db
}

// WithDeleted adds the deleted to the search node params
func (o *SearchNodeParams) WithDeleted(deleted *bool) *SearchNodeParams {
	o.SetDeleted(deleted)
	return o
}

// SetDeleted adds the deleted to the search node params
func (o *SearchNodeParams) SetDeleted(deleted *bool) {
	o.Deleted = deleted
}

// WithFulltext adds the fulltext to the search node params
func (o *SearchNodeParams) WithFulltext(fulltext *string) *SearchNodeParams {
	o.SetFulltext(fulltext)
	return o
}

// SetFulltext adds the fulltext to the search node params
func (o *SearchNodeParams) SetFulltext(fulltext *string) {
	o.Fulltext = fulltext
}

// WithQuery adds the query to the search node params
func (o *SearchNodeParams) WithQuery(query *models.NodeQuery) *SearchNodeParams {
	o.SetQuery(query)
	return o
}

// SetQuery adds the query to the search node params
func (o *SearchNodeParams) SetQuery(query *models.NodeQuery) {
	o.Query = query
}

// WriteToRequest writes these params to a swagger request
func (o *SearchNodeParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Bbox != nil {

		// query param bbox
		var qrBbox string
		if o.Bbox != nil {
			qrBbox = *o.Bbox
		}
		qBbox := qrBbox
		if qBbox != "" {
			if err := r.SetQueryParam("bbox", qBbox); err != nil {
				return err
			}
		}

	}

	// path param db
	if err := r.SetPathParam("db", o.Db); err != nil {
		return err
	}

	if o.Deleted != nil {

		// query param deleted
		var qrDeleted bool
		if o.Deleted != nil {
			qrDeleted = *o.Deleted
		}
		qDeleted := swag.FormatBool(qrDeleted)
		if qDeleted != "" {
			if err := r.SetQueryParam("deleted", qDeleted); err != nil {
				return err
			}
		}

	}

	if o.Fulltext != nil {

		// query param fulltext
		var qrFulltext string
		if o.Fulltext != nil {
			qrFulltext = *o.Fulltext
		}
		qFulltext := qrFulltext
		if qFulltext != "" {
			if err := r.SetQueryParam("fulltext", qFulltext); err != nil {
				return err
			}
		}

	}

	if o.Query != nil {
		if err := r.SetBodyParam(o.Query); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
