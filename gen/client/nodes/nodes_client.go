// Code generated by go-swagger; DO NOT EDIT.

package nodes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new nodes API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for nodes API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
ChangesDb gets changes
*/
func (a *Client) ChangesDb(params *ChangesDbParams, authInfo runtime.ClientAuthInfoWriter) (*ChangesDbOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewChangesDbParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "changesDb",
		Method:             "GET",
		PathPattern:        "/node/{db}/_changes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ChangesDbReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ChangesDbOK), nil

}

/*
CreateNode creates new node
*/
func (a *Client) CreateNode(params *CreateNodeParams, authInfo runtime.ClientAuthInfoWriter) (*CreateNodeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateNodeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createNode",
		Method:             "POST",
		PathPattern:        "/node/{db}/_create",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateNodeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateNodeOK), nil

}

/*
DeleteAttachment gets blob
*/
func (a *Client) DeleteAttachment(params *DeleteAttachmentParams, authInfo runtime.ClientAuthInfoWriter, writer io.Writer) (*DeleteAttachmentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAttachmentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteAttachment",
		Method:             "DELETE",
		PathPattern:        "/node/{db}/{id}/{attname}",
		ProducesMediaTypes: []string{"application/octet-stream"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteAttachmentReader{formats: a.formats, writer: writer},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteAttachmentOK), nil

}

/*
DeleteNode deletes
*/
func (a *Client) DeleteNode(params *DeleteNodeParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteNodeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteNodeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteNode",
		Method:             "DELETE",
		PathPattern:        "/node/{db}/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteNodeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteNodeOK), nil

}

/*
GetAttachment gets blob
*/
func (a *Client) GetAttachment(params *GetAttachmentParams, authInfo runtime.ClientAuthInfoWriter, writer io.Writer) (*GetAttachmentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAttachmentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAttachment",
		Method:             "GET",
		PathPattern:        "/node/{db}/{id}/{attname}",
		ProducesMediaTypes: []string{"application/octet-stream"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAttachmentReader{formats: a.formats, writer: writer},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAttachmentOK), nil

}

/*
GetMultipleNodes gets multiple node data
*/
func (a *Client) GetMultipleNodes(params *GetMultipleNodesParams, authInfo runtime.ClientAuthInfoWriter) (*GetMultipleNodesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMultipleNodesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getMultipleNodes",
		Method:             "GET",
		PathPattern:        "/node/{db}/_multi",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetMultipleNodesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMultipleNodesOK), nil

}

/*
GetNode gets node data
*/
func (a *Client) GetNode(params *GetNodeParams, authInfo runtime.ClientAuthInfoWriter) (*GetNodeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNodeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNode",
		Method:             "GET",
		PathPattern:        "/node/{db}/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetNodeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetNodeOK), nil

}

/*
PatchNode partiallies update fields of a node
*/
func (a *Client) PatchNode(params *PatchNodeParams, authInfo runtime.ClientAuthInfoWriter) (*PatchNodeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchNodeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchNode",
		Method:             "PATCH",
		PathPattern:        "/node/{db}/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchNodeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchNodeOK), nil

}

/*
PutAttachment gets blob
*/
func (a *Client) PutAttachment(params *PutAttachmentParams, authInfo runtime.ClientAuthInfoWriter, writer io.Writer) (*PutAttachmentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutAttachmentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putAttachment",
		Method:             "PUT",
		PathPattern:        "/node/{db}/{id}/{attname}",
		ProducesMediaTypes: []string{"application/octet-stream"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutAttachmentReader{formats: a.formats, writer: writer},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutAttachmentOK), nil

}

/*
PutDb creates a new database
*/
func (a *Client) PutDb(params *PutDbParams, authInfo runtime.ClientAuthInfoWriter) (*PutDbOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutDbParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putDb",
		Method:             "PUT",
		PathPattern:        "/node/{db}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutDbReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutDbOK), nil

}

/*
SearchNode searches

Search for objects in openflightmaps database.

*/
func (a *Client) SearchNode(params *SearchNodeParams, authInfo runtime.ClientAuthInfoWriter) (*SearchNodeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchNodeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "searchNode",
		Method:             "POST",
		PathPattern:        "/node/{db}/_search",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SearchNodeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SearchNodeOK), nil

}

/*
UpdateNode replaces node with new node
*/
func (a *Client) UpdateNode(params *UpdateNodeParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateNodeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateNodeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateNode",
		Method:             "PUT",
		PathPattern:        "/node/{db}/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateNodeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateNodeOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
